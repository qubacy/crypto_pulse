// Mocks generated by Mockito 5.4.4 from annotations
// in crypto_pulse/test/application/ui/screen/home/model/HomeModelImplTest.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:crypto_pulse/application/data/repository/crypto/_common/CryptoRepository.dart'
    as _i5;
import 'package:crypto_pulse/application/data/repository/crypto/_common/model/DataCrypto.dart'
    as _i7;
import 'package:crypto_pulse/application/data/repository/crypto/_common/source/http/rest/_common/RemoteCryptoHttpRestDataSource.dart'
    as _i3;
import 'package:crypto_pulse/application/data/repository/crypto/_common/source/local/database/_common/LocalCryptoDatabaseDataSource.dart'
    as _i2;
import 'package:crypto_pulse/application/data/repository/crypto/_common/updater/_common/CryptocurrencyUpdater.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalCryptoDatabaseDataSource_0 extends _i1.SmartFake
    implements _i2.LocalCryptoDatabaseDataSource {
  _FakeLocalCryptoDatabaseDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteCryptoHttpRestDataSource_1 extends _i1.SmartFake
    implements _i3.RemoteCryptoHttpRestDataSource {
  _FakeRemoteCryptoHttpRestDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCryptocurrencyUpdater_2 extends _i1.SmartFake
    implements _i4.CryptocurrencyUpdater {
  _FakeCryptocurrencyUpdater_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CryptoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoRepository extends _i1.Mock implements _i5.CryptoRepository {
  MockCryptoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocalCryptoDatabaseDataSource get localCryptoDatabaseDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#localCryptoDatabaseDataSource),
        returnValue: _FakeLocalCryptoDatabaseDataSource_0(
          this,
          Invocation.getter(#localCryptoDatabaseDataSource),
        ),
      ) as _i2.LocalCryptoDatabaseDataSource);

  @override
  set localCryptoDatabaseDataSource(
          _i2.LocalCryptoDatabaseDataSource? _localCryptoDatabaseDataSource) =>
      super.noSuchMethod(
        Invocation.setter(
          #localCryptoDatabaseDataSource,
          _localCryptoDatabaseDataSource,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.RemoteCryptoHttpRestDataSource get remoteCryptoHttpRestDataSource =>
      (super.noSuchMethod(
        Invocation.getter(#remoteCryptoHttpRestDataSource),
        returnValue: _FakeRemoteCryptoHttpRestDataSource_1(
          this,
          Invocation.getter(#remoteCryptoHttpRestDataSource),
        ),
      ) as _i3.RemoteCryptoHttpRestDataSource);

  @override
  set remoteCryptoHttpRestDataSource(
          _i3.RemoteCryptoHttpRestDataSource?
              _remoteCryptoHttpRestDataSource) =>
      super.noSuchMethod(
        Invocation.setter(
          #remoteCryptoHttpRestDataSource,
          _remoteCryptoHttpRestDataSource,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.CryptocurrencyUpdater get cryptocurrencyUpdater => (super.noSuchMethod(
        Invocation.getter(#cryptocurrencyUpdater),
        returnValue: _FakeCryptocurrencyUpdater_2(
          this,
          Invocation.getter(#cryptocurrencyUpdater),
        ),
      ) as _i4.CryptocurrencyUpdater);

  @override
  set cryptocurrencyUpdater(
          _i4.CryptocurrencyUpdater? _cryptocurrencyUpdater) =>
      super.noSuchMethod(
        Invocation.setter(
          #cryptocurrencyUpdater,
          _cryptocurrencyUpdater,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<List<_i7.DataCrypto>> get dataCryptoStream => (super.noSuchMethod(
        Invocation.getter(#dataCryptoStream),
        returnValue: _i6.Stream<List<_i7.DataCrypto>>.empty(),
      ) as _i6.Stream<List<_i7.DataCrypto>>);

  @override
  set dataCryptoStream(_i6.Stream<List<_i7.DataCrypto>>? _dataCryptoStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #dataCryptoStream,
          _dataCryptoStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<List<_i7.DataCrypto>> get favoriteDataCryptoStream =>
      (super.noSuchMethod(
        Invocation.getter(#favoriteDataCryptoStream),
        returnValue: _i6.Stream<List<_i7.DataCrypto>>.empty(),
      ) as _i6.Stream<List<_i7.DataCrypto>>);

  @override
  set favoriteDataCryptoStream(
          _i6.Stream<List<_i7.DataCrypto>>? _favoriteDataCryptoStream) =>
      super.noSuchMethod(
        Invocation.setter(
          #favoriteDataCryptoStream,
          _favoriteDataCryptoStream,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loadCryptocurrencies(int? count) => super.noSuchMethod(
        Invocation.method(
          #loadCryptocurrencies,
          [count],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> loadFavorites() => (super.noSuchMethod(
        Invocation.method(
          #loadFavorites,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addToFavorites(String? cryptoToken) => super.noSuchMethod(
        Invocation.method(
          #addToFavorites,
          [cryptoToken],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromFavorites(String? cryptoToken) => super.noSuchMethod(
        Invocation.method(
          #removeFromFavorites,
          [cryptoToken],
        ),
        returnValueForMissingStub: null,
      );
}
