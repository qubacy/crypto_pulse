// Mocks generated by Mockito 5.4.4 from annotations
// in crypto_pulse/test/application/data/repository/_common/source/http/context/impl/HttpContextImplTest.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_dotenv/src/dotenv.dart' as _i2;
import 'package:flutter_dotenv/src/parser.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DotEnv].
///
/// See the documentation for Mockito's code generation for more information.
class MockDotEnv extends _i1.Mock implements _i2.DotEnv {
  MockDotEnv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  void clean() => super.noSuchMethod(
        Invocation.method(
          #clean,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [name],
          {#fallback: fallback},
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #get,
            [name],
            {#fallback: fallback},
          ),
        ),
      ) as String);

  @override
  String? maybeGet(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #maybeGet,
        [name],
        {#fallback: fallback},
      )) as String?);

  @override
  _i4.Future<void> load({
    String? fileName = r'.env',
    _i5.Parser? parser = const _i5.Parser(),
    Map<String, String>? mergeWith = const {},
    bool? isOptional = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
          {
            #fileName: fileName,
            #parser: parser,
            #mergeWith: mergeWith,
            #isOptional: isOptional,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void testLoad({
    String? fileInput = r'',
    _i5.Parser? parser = const _i5.Parser(),
    Map<String, String>? mergeWith = const {},
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #testLoad,
          [],
          {
            #fileInput: fileInput,
            #parser: parser,
            #mergeWith: mergeWith,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isEveryDefined(Iterable<String>? vars) => (super.noSuchMethod(
        Invocation.method(
          #isEveryDefined,
          [vars],
        ),
        returnValue: false,
      ) as bool);
}
