// Mocks generated by Mockito 5.4.4 from annotations
// in crypto_pulse/test/application/data/repository/_common/source/http/util/HttpDataSourceUtilTest.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crypto_pulse/application/data/repository/_common/source/http/context/_common/HttpContext.dart'
    as _i2;
import 'package:crypto_pulse/application/data/repository/_common/source/http/header/interceptor/_common/HttpHeaderInterceptor.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HttpContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpContext extends _i1.Mock implements _i2.HttpContext {
  MockHttpContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as String);

  @override
  set baseUri(String? _baseUri) => super.noSuchMethod(
        Invocation.setter(
          #baseUri,
          _baseUri,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpHeaderInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaderInterceptor extends _i1.Mock
    implements _i4.HttpHeaderInterceptor {
  MockHttpHeaderInterceptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> intercept(Map<String, String>? headers) =>
      (super.noSuchMethod(
        Invocation.method(
          #intercept,
          [headers],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
